{"version":3,"file":"static/js/760.4d6f8006.chunk.js","mappings":"kRAKMA,EAAYC,EAAAA,GAAAA,EAAH,uCAITC,EAAY,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACnB,OACE,SAAC,KAAD,CACEA,KAAMA,EACNC,OAAQ,SAAAC,GAAO,OAAI,SAACL,EAAD,UAAYK,GAAhB,GAGpB,EAEKC,EAAW,CAAC,UAAW,WAAY,OAAQ,WAE3CC,EAAmBC,EAAAA,GAAW,CAClCC,QAASD,EAAAA,KAAaE,SAAS,2BAA2BC,MAAML,GAChEH,KAAMK,EAAAA,KAAaE,WACnBE,MAAOJ,EAAAA,KAAaI,QAAQF,WAC5BG,SAAUL,EAAAA,KAAaE,WACvBI,MAAON,EAAAA,KAAaE,WACpBK,OAAQP,EAAAA,KAAaE,WACrBM,OAAQR,EAAAA,KAAaS,IAAI,GAAGC,IAAI,IAAIR,WACpCS,KAAMX,EAAAA,KAAWY,SAAQ,kBAAM,IAAIC,IAAV,IACzBC,eAAgBd,EAAAA,KAAcY,SAAQ,KAGlCG,EAAgB,CACpBpB,KAAM,GACNS,MAAO,GACPC,SAAU,GACVC,MAAO,GACPC,OAAQ,GACRC,OAAQ,GACRG,KAAM,IAAIE,KACVC,gBAAgB,EAChBb,QAAS,IAGI,SAASe,EAAT,GAA2C,IAAnBC,EAAkB,EAAlBA,eAQrC,OACE,0BACE,SAAC,KAAD,CACEF,cAAeA,EACfhB,iBAAkBA,EAClBmB,SAZe,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACxBhB,EAAQe,EAAOf,MACfC,EAAWc,EAAOd,SACxBY,EAAeb,EAAOC,GACtBgB,QAAQC,IAAIH,GACZC,GACD,EAGG,UAKE,UAAC,KAAD,CAAMG,aAAa,MAAnB,WACE,4BACE,kBAAOC,QAAQ,OAAf,wBACA,4BACE,SAAC,KAAD,CAAO7B,KAAK,OAAO8B,KAAK,OAAOC,YAAY,eAC3C,SAAChC,EAAD,CAAWC,KAAK,gBAGpB,4BACE,kBAAO6B,QAAQ,QAAf,4BACA,4BACE,SAAC,KAAD,CAAO7B,KAAK,QAAQ8B,KAAK,OAAOC,YAAY,mBAC5C,SAAChC,EAAD,CAAWC,KAAK,iBAGpB,4BACE,kBAAO6B,QAAQ,WAAf,uBACA,4BACE,SAAC,KAAD,CAAO7B,KAAK,WAAW8B,KAAK,OAAOC,YAAY,cAC/C,SAAChC,EAAD,CAAWC,KAAK,oBAGpB,4BACE,kBAAO6B,QAAQ,UAAf,sBACA,4BACE,UAAC,KAAD,CAAO7B,KAAK,UAAUgC,GAAG,SAAzB,WACE,mBAAQC,MAAM,GAAd,8BACC9B,EAAS+B,KAAI,SAAC5B,EAAS6B,GAAV,OACZ,mBAAQF,MAAO3B,EAAf,SACGA,GAD0B6B,EADjB,QAMhB,SAACpC,EAAD,CAAWC,KAAK,mBAGpB,4BACE,kBAAO6B,QAAQ,QAAf,oBACA,4BACE,SAAC,KAAD,CAAO7B,KAAK,QAAQ8B,KAAK,OAAOC,YAAY,WAC5C,SAAChC,EAAD,CAAWC,KAAK,iBAGpB,4BACE,kBAAO6B,QAAQ,SAAf,qBACA,4BACE,SAAC,KAAD,CAAO7B,KAAK,SAASgC,GAAG,WAAWD,YAAY,YAC/C,SAAChC,EAAD,CAAWC,KAAK,kBAGpB,4BACE,kBAAO6B,QAAQ,SAAf,qBACA,4BACE,SAAC,KAAD,CAAO7B,KAAK,SAAS8B,KAAK,SAASC,YAAY,YAC/C,SAAChC,EAAD,CAAWC,KAAK,kBAGpB,0BACE,0BACE,mBAAO6B,QAAQ,iBAAf,WACE,SAAC,KAAD,CAAO7B,KAAK,iBAAiB8B,KAAK,aADpC,0BAMJ,mBAAQA,KAAK,SAAb,0BAKT,CCpHc,SAASM,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MAGXC,GAAOC,EAAAA,EAAAA,MA6Bb,OACE,0BACE,SAACnB,EAAD,CAAcC,eA7BG,SAACb,EAAOC,GAI3BgB,QAAQC,IAAIlB,EAAOC,IAEnB+B,EAAAA,EAAAA,IAA2BF,EAAM9B,EAAOC,GACrCgC,MAAK,SAAAC,GACJjB,QAAQC,IAAIgB,EAAeC,MAC3BP,GACEQ,EAAAA,EAAAA,GAAQ,CACNpC,MAAOkC,EAAeC,KAAKnC,MAC3BqC,GAAIH,EAAeC,KAAKG,IACxBC,MAAOL,EAAeC,KAAKK,cAGhC,IACAC,OAAM,SAAAC,GACLC,MAAM,gBACN,IAAMC,EAAYF,EAAMG,KACxB5B,QAAQC,IAAI0B,GACZ,IAAME,EAAeJ,EAAMjD,QAC3BwB,QAAQyB,MAAMI,EACf,GAEJ,KAOF,C","sources":["components/FormikFairbase/FormikSignIn.jsx","components/FormikFairbase/SignIn.jsx"],"sourcesContent":["import React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport styled from 'styled-components';\n\nconst ErrorText = styled.p`\n  color: red;\n`;\n\nconst FormError = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <ErrorText>{message}</ErrorText>}\n    />\n  );\n};\n\nconst products = ['Sweater', 'Keyboard', 'Sofa', 'Freezer'];\n\nconst validationSchema = Yup.object({\n  product: Yup.string().required('Please select a product').oneOf(products),\n  name: Yup.string().required(),\n  email: Yup.string().email().required(),\n  password: Yup.string().required(),\n  title: Yup.string().required(),\n  review: Yup.string().required(),\n  rating: Yup.number().min(1).max(10).required(),\n  date: Yup.date().default(() => new Date()),\n  wouldRecommend: Yup.boolean().default(false),\n});\n\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n  title: '',\n  review: '',\n  rating: '',\n  date: new Date(),\n  wouldRecommend: false,\n  product: '',\n};\n\nexport default function FormikSignIn({ onAutorization }) {\n  const handleSubmit = (values, { resetForm }) => {\n    const email = values.email;\n    const password = values.password;\n    onAutorization(email, password);\n    console.log(values);\n    resetForm();\n  };\n  return (\n    <div>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={handleSubmit}\n      >\n        <Form autoComplete=\"off\">\n          <div>\n            <label htmlFor=\"name\">Full name</label>\n            <div>\n              <Field name=\"name\" type=\"text\" placeholder=\"Full name\" />\n              <FormError name=\"name\" />\n            </div>\n          </div>\n          <div>\n            <label htmlFor=\"email\">Email address</label>\n            <div>\n              <Field name=\"email\" type=\"text\" placeholder=\"Email address\" />\n              <FormError name=\"email\" />\n            </div>\n          </div>\n          <div>\n            <label htmlFor=\"password\">Password</label>\n            <div>\n              <Field name=\"password\" type=\"text\" placeholder=\"Password\" />\n              <FormError name=\"password\" />\n            </div>\n          </div>\n          <div>\n            <label htmlFor=\"product\">Product</label>\n            <div>\n              <Field name=\"product\" as=\"select\">\n                <option value=\"\">Select a product</option>\n                {products.map((product, idx) => (\n                  <option value={product} key={idx}>\n                    {product}\n                  </option>\n                ))}\n              </Field>\n              <FormError name=\"product\" />\n            </div>\n          </div>\n          <div>\n            <label htmlFor=\"title\">Title</label>\n            <div>\n              <Field name=\"title\" type=\"text\" placeholder=\"Title\" />\n              <FormError name=\"title\" />\n            </div>\n          </div>\n          <div>\n            <label htmlFor=\"review\">Review</label>\n            <div>\n              <Field name=\"review\" as=\"textarea\" placeholder=\"Review\" />\n              <FormError name=\"review\" />\n            </div>\n          </div>\n          <div>\n            <label htmlFor=\"rating\">Rating</label>\n            <div>\n              <Field name=\"rating\" type=\"number\" placeholder=\"Rating\" />\n              <FormError name=\"rating\" />\n            </div>\n          </div>\n          <div>\n            <div>\n              <label htmlFor=\"wouldRecommend\">\n                <Field name=\"wouldRecommend\" type=\"checkbox\" />\n                Would recommend\n              </label>\n            </div>\n          </div>\n          <button type=\"submit\">Submit</button>\n        </Form>\n      </Formik>\n    </div>\n  );\n}\n\n// https://github.com/luxplanjay/react-41/blob/04-forms/src/components/ProductReviewForm/ProductReviewForm.jsx\n","import { useDispatch } from 'react-redux';\nimport { setUser } from 'store/slices/userSlice';\nimport { getAuth, signInWithEmailAndPassword } from 'firebase/auth';\nimport FormikSignIn from './FormikSignIn';\n// import { Link, useLocation } from 'react-router-dom';\n// import {\n//   BtnFormFB,\n//   InputEmail,\n//   InputPass,\n//   TitleFB,\n//   WrapFormFB,\n// } from 'components/RegistrationFB/Form.styled';\n\nexport default function SignIn() {\n  const dispatch = useDispatch();\n  // const location = useLocation();\n  // const backLinkHref = location.state?.from ?? '/';\n  const auth = getAuth();\n\n  const handleSignIn = (email, password) => {\n    // evt.preventDefault();\n    // const email = evt.target.elements.email.value;\n    // const password = evt.target.elements.pass.value;\n    console.log(email, password);\n\n    signInWithEmailAndPassword(auth, email, password)\n      .then(userCredential => {\n        console.log(userCredential.user);\n        dispatch(\n          setUser({\n            email: userCredential.user.email,\n            id: userCredential.user.uid,\n            token: userCredential.user.accessToken,\n          })\n        );\n      })\n      .catch(error => {\n        alert('Invalid user');\n        const errorCode = error.code;\n        console.log(errorCode);\n        const errorMessage = error.message;\n        console.error(errorMessage);\n      });\n    // <Link to={backLinkHref} />;\n  };\n\n  return (\n    <div>\n      <FormikSignIn onAutorization={handleSignIn} />\n    </div>\n  );\n}\n\n// <h1>Login Page</h1>\n//     <TitleFB>Form</TitleFB>\n//     <WrapFormFB id=\"login\" onSubmit={event => handleLogin(event)}>\n//       <InputEmail type=\"email\" name=\"email\" placeholder=\"email\" />\n//       <InputPass type=\"password\" name=\"pass\" placeholder=\"password\" />\n//       <BtnFormFB type=\"submit\">Sign in</BtnFormFB>\n//       <Link to={backLinkHref}>Home</Link>\n//     </WrapFormFB>\n"],"names":["ErrorText","styled","FormError","name","render","message","products","validationSchema","Yup","product","required","oneOf","email","password","title","review","rating","min","max","date","default","Date","wouldRecommend","initialValues","FormikSignIn","onAutorization","onSubmit","values","resetForm","console","log","autoComplete","htmlFor","type","placeholder","as","value","map","idx","SignIn","dispatch","useDispatch","auth","getAuth","signInWithEmailAndPassword","then","userCredential","user","setUser","id","uid","token","accessToken","catch","error","alert","errorCode","code","errorMessage"],"sourceRoot":""}